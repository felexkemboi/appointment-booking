{"remainingRequest":"/home/felex/Desktop/tasks/pocket-rn/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/felex/Desktop/tasks/pocket-rn/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/felex/Desktop/tasks/pocket-rn/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/felex/Desktop/tasks/pocket-rn/src/views/UserRegister.vue?vue&type=template&id=35ebfdc8&scoped=true&","dependencies":[{"path":"/home/felex/Desktop/tasks/pocket-rn/src/views/UserRegister.vue","mtime":1619073994000},{"path":"/home/felex/Desktop/tasks/pocket-rn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/felex/Desktop/tasks/pocket-rn/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/felex/Desktop/tasks/pocket-rn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/felex/Desktop/tasks/pocket-rn/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}